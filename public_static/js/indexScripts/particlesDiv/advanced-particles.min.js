/**
   * @license
   * author: John-Paul-R
   * advancedparticles.js v1.0.0
   * Released under the MIT license.
   */
var advancedparticles=function(e){"use strict";const t="advanced_particles-container";const n=({min:e,max:t})=>Math.random()*(t-e)+e;function o({particleCount:e,sizeSupplier:t,velocity:o,bounds:i}){const c=[],{x1:l,y1:r,x2:a,y2:s}=i;for(let t=0;t<e;t++)c.push({x:n({min:l,max:a}),y:n({min:r,max:s}),velocity:"number"==typeof o?o:1,direction:2*Math.random()*Math.PI});return c}const i=(e,{min:t,max:n})=>e>t&&e<n,c=(e,t,n,o,c)=>{const l=i(n,{min:c.x1,max:c.x2})?e:-e,r=i(o,{min:c.y1,max:c.y2})?t:-t;return Math.atan2(r,l)},l=(e,t)=>{const n=.16666666666666666*e.velocity,o=Math.cos(e.direction),i=Math.sin(e.direction),l=e.x+o*n,r=e.y+i*n,{velocity:a,bounds:s}=t;return{x:l,y:r,velocity:"function"==typeof a?a(e):a,direction:c(o,i,l,r,s)}};let r=0;const a={lines:0,circles:0,nextState:0},s=(e,t,n,o)=>e*((t-1)/t)+1/t*(o-n);return e.generateInitialState=function(e){return{particles:o(e)}},e.init=function(){const e=(()=>{const e=document.getElementById(t);if(null===e)throw new Error(`No container div with id ${t} found.`);const n=document.createElement("canvas");return e.appendChild(n),n})().getContext("2d"),{width:n,height:o}=e.canvas;e.fillStyle="#353535",e.fillRect(0,0,n,o),e.fillStyle="#656565",e.fillRect(10,10,10,10)},e.nextFrame=function e({ctx:t,settings:n,state:o,renderCallback:i}){r+=1;const{maxLineRange:c,sizeSupplier:f,colorSupplier:u=(()=>"#656565"),circleMode:d,lineColorSupplier:h=(()=>"#353535")}=n,{particles:m}=o,{width:p,height:y}=t.canvas;t.clearRect(0,0,p,y);const x={},v=(e,t,n)=>{if(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)<Math.pow(n,2)){const n=h(e,t);let o=x[n];void 0===o&&(o=[],x[n]=o),o.push([e,t])}};{const e=performance.now();if(c){for(let e=0;e<m.length;e++)for(let t=e+1;t<m.length;t++)v(m[e],m[t],c);for(const[e,n]of Object.entries(x)){t.beginPath(),t.strokeStyle=e;for(let e=0;e<n.length;e++){const o=n[e];t.moveTo(o[0].x,o[0].y),t.lineTo(o[1].x,o[1].y)}t.stroke(),t.closePath()}}a.lines=s(a.lines,r,e,performance.now())}{const e=performance.now();if("disabled"!==d)for(let e=0;e<m.length;e++){const n=m[e];t.fillStyle=u(n),t.strokeStyle=t.fillStyle;const o=f(n);t.moveTo(n.x,n.y),t.beginPath(),t.ellipse(n.x,n.y,o,o,2*Math.PI,0,2*Math.PI),"fill"===d?t.fill():t.stroke(),t.closePath()}a.circles=s(a.circles,r,e,performance.now())}const g=[];{const e=performance.now();for(let e=0;e<m.length;e++)g.push(l(m[e],n));a.nextState=s(a.nextState,r,e,performance.now())}const w=null==i?void 0:i(a,n);requestAnimationFrame((o=>e({ctx:t,settings:null!=w?w:n,state:{particles:g},renderCallback:i})))},e.sumEven=e=>e.reduce(((e,t)=>t%2==0?e+t:e)),Object.defineProperty(e,"__esModule",{value:!0}),e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
